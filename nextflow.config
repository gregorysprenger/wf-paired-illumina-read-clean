profiles {

    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        fixOwnership           = true
        runOptions             = "-u \$(id -u):\$(id -g)"
        singularity.enabled    = false
        shifter.enabled        = false
    }

    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        shifter.enabled        = false
        conda.enabled          = false
        params.enable_conda    = false
    }

    sge {
        process {
            executor = 'sge'
            penv     = 'smp'
            queue    = 'all.q'
        }
    }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format('yyyy-MM-dd HH:mm:ss')

// Global default params
params {

    // Boilerplate options
    outpath = new File("${launchDir}").getCanonicalPath()
    logpath = new File("${outpath}/.log").getCanonicalPath()
    process_log_dir = new File("${params.outpath}/log/process_logs").getCanonicalPath()
    publish_dir_mode = 'copy'
    help = false
    version = false

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
}


timeline {
    enabled = true
    file    = "${params.outpath}/timeline.${trace_timestamp}.html"
}

report {
    enabled = true
    file    = "${params.outpath}/report.${trace_timestamp}.html"
}

trace {
    enabled = true
    fields  = 'task_id,name,status,exit,realtime,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar'
    file    = "${params.outpath}/trace.${trace_timestamp}.txt"
}

dag {
    enabled = true
    file    = "${params.outpath}/pipeline_dag.${trace_timestamp}.svg"
}

manifest {
    name = 'wf-paired-illumina-read-clean'
    author = 'Gregory Sprenger'
    description = ''
    mainScript = 'main.nf'
    nextflowVersion = '>=20.01.0'
    version = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond a maximum limit
// This code is from: https://github.com/nf-core/rnaseq/blob/3643a94411b65f42bce5357c5015603099556ad9/nextflow.config
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}